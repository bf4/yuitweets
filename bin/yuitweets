#!/usr/bin/env ruby

# This is currently just a stupid executable that grabs the latest unseen
# Twitter search results for [yui] and shoves them into the YUITweets database.

require 'oauth'
require 'open-uri'
require 'trollop'
require 'yajl'

require 'yuitweets'

module YUITweets::CLI
  TWITTER_URL = 'http://search.twitter.com/search.json?q=yui%20OR%20yuilibrary%20OR%20yui3%20OR%20yuiconf%20OR%20yuiconf2010&lang=en&rpp=100&result_type=recent'
  USER_AGENT  = "YUITweets/#{YUITweets::VERSION} (+http://github.com/rgrove/yuitweets/)"

  # Attempts to classify unknown tweets.
  def self.classify_tweets
    classify_count = 0
    to_relay       = []

    puts "Classifying tweets..."

    YUITweets::Tweet.recent({'type' => nil}, {:limit => 200}).each do |tweet|
      if type = YUITweets.bayes.classify(tweet.specimen)
        to_relay << tweet if type == :yui
        tweet.update({'$set' => {'type' => type}}, false)
        classify_count += 1
      end
    end

    puts "--> Classified #{classify_count} tweet(s)"

    if !to_relay.empty? && YUITweets::CONFIG[:relay_tweets]
      puts "Relaying tweets..."

      relay_count = 0

      to_relay.each do |tweet|
        relay_count += 1 if self.retweet(tweet.id_str)
      end

      puts "--> Relayed #{relay_count} tweet(s)"
    end
  end

  # Fetches new tweets.
  def self.fetch_tweets
    retries = 0
    url     = "#{TWITTER_URL}&since_id=#{YUITweets::Tweet.last_id}"
    ignore  = YUITweets::CONFIG[:ignore_users]

    puts "Fetching new tweets..."

    begin
      tweets = YUITweets.db['tweets']

      open(url, 'User-Agent' => USER_AGENT) do |search|
        count  = 0
        search = Yajl::Parser.parse(search)

        search['results'].each do |tweet|
          next if ignore.include?(tweet['from_user'])

          # Dumb insert; doesn't check to see if the tweet already exists, but
          # nothing bad will happen if it does (the insert will just fail
          # quietly since we're not checking for an error).
          tweet['_id'] = tweet['id']
          tweets.insert(tweet)
          count += 1
        end

        puts "--> Added #{count} new tweet(s)"
      end

    rescue OpenURI::HTTPError => ex
      # Twitter will return a 403 error if the since_id is too old, so we'll
      # retry once without it.
      if retries == 0
        puts "--> HTTP error; retrying one time..."
        retries += 1
        url = TWITTER_URL
        retry
      end

      raise ex
    end
  end

  def self.init_oauth
    return unless @oauth_access_token.nil? # only init once

    consumer = OAuth::Consumer.new(ENV['YUIRELAY_CONSUMER_KEY'], ENV['YUIRELAY_CONSUMER_SECRET'], {
      :site   => 'http://api.twitter.com/1',
      :scheme => :header
    })

    @oauth_access_token = OAuth::AccessToken.from_hash(consumer, {
      :oauth_token        => ENV['YUIRELAY_OAUTH_TOKEN'],
      :oauth_token_secret => ENV['YUIRELAY_OAUTH_SECRET']
    })
  end

  def self.retweet(id)
    return unless YUITweets::CONFIG[:relay_tweets]
    self.init_oauth

    response = @oauth_access_token.post("/statuses/retweet/#{id}.json")

    unless response.code[0] == '2'
      puts "--> Retweet error: #{response.code} #{response.message}"
      return false
    end

    true
  end

  def self.tidy
    # TODO: convert to mongo
    # tokens = YUITweets.db['tokens']
    #
    # # Delete any tokens in the database that are in the stopwords list. This
    # # keeps things clean even if the list is modified after tokens are added.
    # tokens_deleted = 0
    #
    # YUITweets::Config::STOPWORDS.each do |word|
    #   tokens_deleted += tokens.find({})
    #   tokens_deleted += db[:tokens].filter("LOWER(token) = ?", word).delete
    # end
    #
    # if tokens_deleted > 0
    #   puts "--> Deleted #{tokens_deleted} token(s)."
    # end
  end

  # Parse command-line options.
  options = Trollop.options do
    version "YUITweets #{YUITweets::VERSION}"
    banner <<-EOS
Usage:
  yuitweets [options]

Options:
EOS

    opt :tidy,   "Tidy up the database.", :short => '-t'
  end

  YUITweets.init

  if options[:import_given]
    import(options[:import])

  elsif options[:tidy_given]
    tidy

  else
    fetch_tweets
    classify_tweets
  end
end
